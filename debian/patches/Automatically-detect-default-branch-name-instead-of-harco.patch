From: Nelson Benitez Leon <nbenitezl@gmail.com>
Date: Mon, 24 Jan 2022 18:14:37 -0400
Subject: Automatically detect default branch name instead of harcoding
 'master' (#455)

Many projects are starting to change their default branch
name from 'master' to 'main' and similar, eg.:
https://gitlab.gnome.org/GNOME/evince/-/issues/1635

So when a project is not providing a specific branch,
instead of defaulting to 'master' we should ask the
remote repo which is their default branch name.

That can be retrieve with following command:
git ls-remote --symref origin HEAD

where 'origin' can also be a URL to the repository.

Bug: https://github.com/flatpak/flatpak-builder/issues/375
Co-authored-by: Patrick Griffis <tingping@tingping.se>
Origin: upstream, 1.2.3, commit:bc8f872b3e3c1c1f2e492320a76a0f2291742575
---
 src/builder-git.c        | 30 ++++++++++++++++++++++++++++++
 src/builder-git.h        |  1 +
 src/builder-main.c       |  3 ++-
 src/builder-source-git.c | 24 ++++++++++++++++--------
 4 files changed, 49 insertions(+), 9 deletions(-)

diff --git a/src/builder-git.c b/src/builder-git.c
index 985d13d..19a008f 100644
--- a/src/builder-git.c
+++ b/src/builder-git.c
@@ -868,3 +868,33 @@ builder_git_checkout (const char     *repo_location,
 
   return TRUE;
 }
+
+char *
+builder_git_get_default_branch (const char *repo_location)
+{
+  g_auto(GStrv) parts = NULL;
+  g_autofree char *output = NULL;
+  g_autoptr(GError) error = NULL;
+
+  if (!git (NULL, &output, 0, &error,
+            "ls-remote", "--symref", repo_location, "HEAD", NULL))
+    return g_strdup ("master");
+
+  /* Example output:
+   * $ git ls-remote --symref http://gitlab.gnome.org/GNOME/evince.git HEAD
+   * warning: redirigiendo a https://gitlab.gnome.org/GNOME/evince.git/
+   * ref: refs/heads/main	HEAD
+   * 7a5ceb841874bef4b91282eee1025b0335a21795	HEAD
+   */
+  parts = g_strsplit (output, "\t", 1);
+  if (g_strv_length (parts) > 1 && g_str_has_prefix (parts[1], "HEAD") &&
+      g_strstr_len (parts[0], -1, "ref: "))
+    {
+      char *branch = strrchr (parts[0], '/');
+      if (branch != NULL)
+        return g_strdup (branch + 1);
+    }
+
+  g_debug ("Failed to auto-detect default branch from git output");
+  return g_strdup ("master");
+}
\ No newline at end of file
diff --git a/src/builder-git.h b/src/builder-git.h
index dc98bf8..d27fe5e 100644
--- a/src/builder-git.h
+++ b/src/builder-git.h
@@ -56,6 +56,7 @@ gboolean builder_git_shallow_mirror_ref (const char     *repo_location,
                                          const char     *ref,
                                          BuilderContext *context,
                                          GError        **error);
+char *   builder_git_get_default_branch (const char *repo_location);
 
 G_END_DECLS
 
diff --git a/src/builder-main.c b/src/builder-main.c
index fb6802d..fb0c85e 100644
--- a/src/builder-main.c
+++ b/src/builder-main.c
@@ -589,7 +589,8 @@ main (int    argc,
   if (opt_from_git)
     {
       g_autofree char *manifest_dirname = g_path_get_dirname (manifest_rel_path);
-      const char *git_branch = opt_from_git_branch ? opt_from_git_branch : "master";
+      g_autofree char *default_branch_name = builder_git_get_default_branch (opt_from_git);
+      const char *git_branch = opt_from_git_branch ? opt_from_git_branch : default_branch_name;
       g_autoptr(GFile) build_subdir = NULL;
 
       build_subdir = builder_context_allocate_build_subdir (build_context, manifest_basename, &error);
diff --git a/src/builder-source-git.c b/src/builder-source-git.c
index 0d5e041..e6b9ad9 100644
--- a/src/builder-source-git.c
+++ b/src/builder-source-git.c
@@ -44,6 +44,7 @@ struct BuilderSourceGit
   char         *tag;
   char         *commit;
   char         *orig_ref;
+  char         *default_branch_name;
   gboolean      disable_fsckobjects;
   gboolean      disable_shallow_clone;
   gboolean      disable_submodules;
@@ -80,6 +81,7 @@ builder_source_git_finalize (GObject *object)
   g_free (self->tag);
   g_free (self->commit);
   g_free (self->orig_ref);
+  g_free (self->default_branch_name);
 
   G_OBJECT_CLASS (builder_source_git_parent_class)->finalize (object);
 }
@@ -184,7 +186,8 @@ builder_source_git_set_property (GObject      *object,
 }
 
 static const char *
-get_branch (BuilderSourceGit *self)
+get_branch (BuilderSourceGit *self,
+            const char       *repo_location)
 {
   if (self->branch)
     return self->branch;
@@ -193,7 +196,12 @@ get_branch (BuilderSourceGit *self)
   else if (self->commit)
     return self->commit;
   else
-    return "master";
+    {
+      if (self->default_branch_name == NULL)
+        self->default_branch_name = builder_git_get_default_branch (repo_location);
+
+      return self->default_branch_name;
+    }
 }
 
 static char *
@@ -257,7 +265,7 @@ builder_source_git_download (BuilderSource  *source,
     flags |= FLATPAK_GIT_MIRROR_FLAGS_WILL_FETCH_FROM;
 
   if (!builder_git_mirror_repo (location, NULL, flags,
-                                get_branch (self),
+                                get_branch (self, location),
                                 context,
                                 error))
     return FALSE;
@@ -265,8 +273,8 @@ builder_source_git_download (BuilderSource  *source,
   if (self->commit != NULL && (self->branch != NULL || self->tag != NULL))
     {
       /* We want to support the commit being both a tag object and the real commit object that it points too */
-      g_autofree char *current_commit = builder_git_get_current_commit (location, get_branch (self), FALSE, context, error);
-      g_autofree char *current_commit2 = builder_git_get_current_commit (location, get_branch (self), TRUE, context, error);
+      g_autofree char *current_commit = builder_git_get_current_commit (location, get_branch (self, location), FALSE, context, error);
+      g_autofree char *current_commit2 = builder_git_get_current_commit (location, get_branch (self, location), TRUE, context, error);
       if (current_commit == NULL || current_commit2 == NULL)
         return FALSE;
       if (strcmp (current_commit, self->commit) != 0 && strcmp (current_commit2, self->commit) != 0)
@@ -295,7 +303,7 @@ builder_source_git_extract (BuilderSource  *source,
   if (!self->disable_submodules)
     mirror_flags |= FLATPAK_GIT_MIRROR_FLAGS_MIRROR_SUBMODULES;
 
-  if (!builder_git_checkout (location, get_branch (self),
+  if (!builder_git_checkout (location, get_branch (self, location),
                              dest, context, mirror_flags, error))
     return FALSE;
 
@@ -360,7 +368,7 @@ builder_source_git_checksum (BuilderSource  *source,
   location = get_url_or_path (self, context, &error);
   if (location != NULL)
     {
-      current_commit = builder_git_get_current_commit (location,get_branch (self), FALSE, context, &error);
+      current_commit = builder_git_get_current_commit (location, get_branch (self, location), FALSE, context, &error);
       if (current_commit)
         builder_cache_checksum_str (cache, current_commit);
       else if (error)
@@ -385,7 +393,7 @@ builder_source_git_update (BuilderSource  *source,
   if (location == NULL)
     return FALSE;
 
-  self->orig_ref = g_strdup (get_branch (self));
+  self->orig_ref = g_strdup (get_branch (self, location));
   current_commit = builder_git_get_current_commit (location, self->orig_ref, FALSE, context, NULL);
   if (current_commit)
     {
